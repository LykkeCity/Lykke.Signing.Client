// Code generated by Microsoft (R) AutoRest Code Generator 1.0.1.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Lykke.Signing.Client
{
    using Lykke.Signing;
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for LykkeSigningAPI.
    /// </summary>
    public static partial class LykkeSigningAPIExtensions
    {
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static PubKeyResponse ApiBitcoinKeyGet(this ILykkeSigningAPI operations)
            {
                return operations.ApiBitcoinKeyGetAsync().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PubKeyResponse> ApiBitcoinKeyGetAsync(this ILykkeSigningAPI operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiBitcoinKeyGetWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static void ApiBitcoinTempKeyGet(this ILykkeSigningAPI operations)
            {
                operations.ApiBitcoinTempKeyGetAsync().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ApiBitcoinTempKeyGetAsync(this ILykkeSigningAPI operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.ApiBitcoinTempKeyGetWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='model'>
            /// </param>
            public static void ApiBitcoinAddkeyPost(this ILykkeSigningAPI operations, AddKeyRequest model = default(AddKeyRequest))
            {
                operations.ApiBitcoinAddkeyPostAsync(model).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='model'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ApiBitcoinAddkeyPostAsync(this ILykkeSigningAPI operations, AddKeyRequest model = default(AddKeyRequest), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.ApiBitcoinAddkeyPostWithHttpMessagesAsync(model, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='signRequest'>
            /// </param>
            public static TransactionSignResponse ApiBitcoinSignPost(this ILykkeSigningAPI operations, BitcoinTransactionSignRequest signRequest = default(BitcoinTransactionSignRequest))
            {
                return operations.ApiBitcoinSignPostAsync(signRequest).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='signRequest'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<TransactionSignResponse> ApiBitcoinSignPostAsync(this ILykkeSigningAPI operations, BitcoinTransactionSignRequest signRequest = default(BitcoinTransactionSignRequest), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiBitcoinSignPostWithHttpMessagesAsync(signRequest, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='address'>
            /// </param>
            public static PrivateKeyResponse ApiBitcoinGetkeyGet(this ILykkeSigningAPI operations, string address = default(string))
            {
                return operations.ApiBitcoinGetkeyGetAsync(address).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='address'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PrivateKeyResponse> ApiBitcoinGetkeyGetAsync(this ILykkeSigningAPI operations, string address = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiBitcoinGetkeyGetWithHttpMessagesAsync(address, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static EthereumAddressResponse ApiEthereumKeyGet(this ILykkeSigningAPI operations)
            {
                return operations.ApiEthereumKeyGetAsync().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<EthereumAddressResponse> ApiEthereumKeyGetAsync(this ILykkeSigningAPI operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiEthereumKeyGetWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='model'>
            /// </param>
            public static void ApiEthereumAddkeyPost(this ILykkeSigningAPI operations, AddKeyRequest model = default(AddKeyRequest))
            {
                operations.ApiEthereumAddkeyPostAsync(model).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='model'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ApiEthereumAddkeyPostAsync(this ILykkeSigningAPI operations, AddKeyRequest model = default(AddKeyRequest), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.ApiEthereumAddkeyPostWithHttpMessagesAsync(model, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='signRequest'>
            /// </param>
            public static TransactionSignResponse ApiEthereumSignPost(this ILykkeSigningAPI operations, EthereumTransactionSignRequest signRequest = default(EthereumTransactionSignRequest))
            {
                return operations.ApiEthereumSignPostAsync(signRequest).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='signRequest'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<TransactionSignResponse> ApiEthereumSignPostAsync(this ILykkeSigningAPI operations, EthereumTransactionSignRequest signRequest = default(EthereumTransactionSignRequest), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiEthereumSignPostWithHttpMessagesAsync(signRequest, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='signRequest'>
            /// </param>
            public static HashSignResponse ApiEthereumSignHashPost(this ILykkeSigningAPI operations, EthereumHashSignRequest signRequest = default(EthereumHashSignRequest))
            {
                return operations.ApiEthereumSignHashPostAsync(signRequest).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='signRequest'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<HashSignResponse> ApiEthereumSignHashPostAsync(this ILykkeSigningAPI operations, EthereumHashSignRequest signRequest = default(EthereumHashSignRequest), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiEthereumSignHashPostWithHttpMessagesAsync(signRequest, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IsAliveResponse ApiIsAliveGet(this ILykkeSigningAPI operations)
            {
                return operations.ApiIsAliveGetAsync().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IsAliveResponse> ApiIsAliveGetAsync(this ILykkeSigningAPI operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiIsAliveGetWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
